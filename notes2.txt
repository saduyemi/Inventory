const { Router } = require('express');
const { authenticateToken } = require('../controllers/authentication')
const profileController = require('../controllers/usersController');

const router = Router();

//router.get('/users', profileController.selectAllUsers); // this is not needed

router.get('/create/:email/:password', profileController.createuser_post); // keep, but change to post

//router.get('/check/:email/:password', profileController.checkUser_get);

router.get('/delete/:id', profileController.delete_post);

router.post('/login', profileController.login_valid);

router.post('/isvalid', authenticateToken, (req, res) => {
    //console.log(req.userID);
    res.send({ message: "User is logged in" });
}); // Note if want to check cookies from a frontend application, have to make the request post and in options credentials: "include"

router.get('/logout', profileController.logoffUser);

//router.get('/login/:email/:password', profileController.login_server);


module.exports = router;

Logins:
    Email: someEmail@gmail.com, Password: soft2002
    Email: someEmail2@gmail.com, Password: firm2002

    function resizeFile(file) {
    return new Promise((resolve) => {
            Resizer.imageFileResizer(
                file, // file
                700, // maxHeight
                700, // maxWidth
                "JPEG",
                100, // minHeight
                100, // minWidth
                (uri) => { console.log(uri); resolve(uri); },
                "base64" //"blob" // could also be "base64", but made database accept blob type
            );
        });
}

async function prepFile(file) {
        resizeFile(file)
            .then(result => console.log(result))
            .catch(err => console.log(err))
}

// Extra
function fileToUri(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            resolve(e.target.result);
        };
        reader.readAsDataURL(file);
    })
}

function base64ToBlob(base, contentType, sliceSize=512) {
    const byteChars = atob(base);
    const byteArrays = [];

    for (let offset = 0; offset < byteChars.length; offset += sliceSize) {
        const slice = byteChars.slice(offset, offset + sliceSize);

        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
        const blob = new Blob(byteArrays, {type: contentType});

        return blob;
    }
}

function blobToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onloadend = (e) => {
            resolve(e.target.result);
        }

        reader.readAsDataURL(blob);
    })
}
